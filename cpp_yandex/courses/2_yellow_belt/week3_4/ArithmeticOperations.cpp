/*
Часть 1
Реализуйте построение арифметического выражения согласно следующей схеме:

изначально есть выражение, состоящее из некоторого целого числа x;

на каждом шаге к текущему выражению применяется некоторая операция: прибавление числа, вычитание числа, умножение на число или деление на число; перед применением операции выражение всегда должно быть заключено в скобки.

Формат ввода
В первой строке содержится исходное целое число x. Во второй строке содержится целое неотрицательное число N— количество операций. В каждой из следующих N строк содержится очередная операция:

прибавление числа a: + a;

либо вычитание числа b: - b;

либо умножение на число c: * c;

либо деление на число d: / d.

Количество операций может быть нулевым — в этом случае необходимо вывести исходное число.

Формат вывода
Выведите единственную строку — построенное арифметическое выражение.

Обратите внимание на расстановку пробелов вокруг символов:

каждый символ бинарной операции (+, -, * или /) должен быть окружён ровно одним пробелом с каждой стороны: (8) * 3;

символ унарного минуса (для отрицательных чисел) не нуждается в дополнительном пробеле: -5;

скобки и числа не нуждаются в дополнительных пробелах.

Подсказка
Для преобразования числа к строке используйте функцию to_string из библиотеки <string>.
*/

#include <iostream>
#include <string>
#include <deque>

using namespace std;

int main() {
    deque<string> res;
    int number;
    cin >> number;
    res.push_back(to_string(number));
    int operations_num;
    cin >> operations_num;

    for (int i = 0; i < operations_num; i++) {
        char op;
        int num;
        cin >> op >> num;
        res.push_front("(");
        res.push_back(")");
        res.push_back(" " + string(1, op) + " " + to_string(num));
    }

    for (auto& r : res)
        cout << r;
    cout << endl;
}